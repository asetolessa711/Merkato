name: CI - Full Test Suite
on:
  push:
    branches: [ main, feature/** ]
  pull_request:
    branches: [ main ]
jobs:
  test:
    runs-on: ubuntu-latest
    services:
      mongo:
        image: mongo:5.0
        ports: [27017:27017]
        options: >-
          --health-cmd "mongo --eval 'db.runCommand({ ping: 1 })'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    env:
      MONGO_URI: mongodb://localhost:27017/merkato_test
      CI: true
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js 18.x
        uses: actions/setup-node@v4
        with:
          node-version: 18
      - name: Install backend dependencies
        run: |
          cd backend
          npm ci
      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci
      # All checks are non-blocking for development ease
      - name: Run backend tests
        run: |
          cd backend
          npm test || echo "Backend tests failed"
      - name: Run frontend tests
        run: |
          cd frontend
          npm test || echo "Frontend tests failed"
      - name: Lint backend
        run: |
          cd backend
          npm run lint || echo "No lint script defined in backend"
      - name: Lint frontend
        run: |
          cd frontend
          npm run lint || echo "No lint script defined in frontend"
      - name: Build frontend
        run: |
          cd frontend
          npm run build || echo "No build script defined in frontend"
      - name: Audit backend dependencies
        run: |
          cd backend
          npm audit --audit-level=moderate || echo "Audit failed or not supported"
      - name: Audit frontend dependencies
        run: |
          cd frontend
          npm audit --audit-level=moderate || echo "Audit failed or not supported"
      - name: Upload backend coverage artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage
          path: backend/coverage/
      - name: Upload frontend coverage artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: frontend-coverage
          path: frontend/coverage/

      # Prettier formatting check (backend)
      - name: Prettier check backend
        run: |
          cd backend
          npx prettier --check . || echo "Prettier not configured in backend"

      # Prettier formatting check (frontend)
      - name: Prettier check frontend
        run: |
          cd frontend
          npx prettier --check . || echo "Prettier not configured in frontend"

      # Cypress E2E tests (frontend)
      - name: Run Cypress E2E tests
        run: |
          cd frontend
          npx cypress run || echo "Cypress not configured"

      # Release automation: Create a GitHub Release on every push to main
      - name: Create GitHub Release
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ github.run_number }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # CodeQL analysis (security/code quality)
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

      # Test coverage gate (warn if coverage < 80%)
      - name: Check backend coverage threshold
        run: |
          cd backend
          npx nyc check-coverage --lines 80 || echo "Backend coverage below 80%"
      - name: Check frontend coverage threshold
        run: |
          cd frontend
          npx nyc check-coverage --lines 80 || echo "Frontend coverage below 80%"

      # Preview deployment (template, requires setup)
      # - name: Deploy to Preview (template)
      #   if: github.event_name == 'pull_request'
      #   run: echo "Deploy preview environment here (add your deployment script)"

      # Docker/Slack steps can be added when secrets are ready
