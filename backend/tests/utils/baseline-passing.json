{
  "recordedAt": "2025-09-04T08:29:37.456Z",
  "count": 197,
  "tests": [
    "Admin Routes DELETE /api/admin/users/:id should delete user if authorized",
    "Admin Routes DELETE /api/admin/users/:id should return 400 for malformed ID",
    "Admin Routes DELETE /api/admin/users/:id should return 404 for non-existent user",
    "Admin Routes GET /api/admin/dashboard should allow admin to view dashboard",
    "Admin Routes GET /api/admin/dashboard should block non-admin users",
    "Admin Routes GET /api/admin/dashboard should fail without token",
    "Admin Routes GET /api/admin/dashboard should reject invalid token",
    "Admin Routes GET /api/admin/orders should block non-admin",
    "Admin Routes GET /api/admin/orders should fail without token",
    "Admin Routes GET /api/admin/orders should return all orders for admin",
    "Admin Routes GET /api/admin/users should block non-admin",
    "Admin Routes GET /api/admin/users should fail without token",
    "Admin Routes GET /api/admin/users should return user list for admin",
    "Admin Routes GET /api/admin/users should support pagination (if implemented)",
    "Admin Routes PUT /api/admin/orders/:id/status should return 400 for malformed ID",
    "Admin Routes PUT /api/admin/orders/:id/status should return 404 for non-existent order",
    "Admin Routes PUT /api/admin/orders/:id/status should update order status",
    "Admin Routes PUT /api/admin/users/:id should block user from self-escalating role",
    "Admin Routes PUT /api/admin/users/:id should return 400 for malformed user ID",
    "Admin Routes PUT /api/admin/users/:id should return 404 for non-existent user",
    "Admin Routes PUT /api/admin/users/:id should update user role to vendor",
    "Auth Routes GET /api/auth/me should fail without token",
    "Auth Routes GET /api/auth/me should get current user profile with token",
    "Auth Routes POST /api/auth/login should fail with invalid credentials",
    "Auth Routes POST /api/auth/login should login with valid credentials",
    "Auth Routes POST /api/auth/register should not allow duplicate registration",
    "Auth Routes POST /api/auth/register should register a new user",
    "Auth Routes POST /api/auth/register should return 400 for malformed email",
    "Customer Routes Addresses API should add a new address",
    "Customer Routes Addresses API should delete an address",
    "Customer Routes Addresses API should get all addresses",
    "Customer Routes Addresses API should set address as default",
    "Customer Routes Addresses API should update an address",
    "DELETE /api/feedback/:id should allow admin to delete feedback",
    "DELETE /api/feedback/:id should allow user to delete own feedback if supported",
    "DELETE /api/feedback/:id should block unauthorized deletion",
    "DELETE /api/feedback/:id should return 400 for malformed ID",
    "DELETE /api/feedback/:id should return 404 for non-existent feedback",
    "Email Utils (Isolated) placeholder to ensure suite has at least one test",
    "Email Utils resetRateLimiter is a middleware function",
    "Email Utils sendOrderConfirmation handles sendMail error and throws descriptive error",
    "Email Utils sendOrderConfirmation sends a formatted email",
    "Email Utils sendPasswordResetEmail handles sendMail error and throws descriptive error",
    "Email Utils sendPasswordResetEmail sends a reset email with token link",
    "Email Utils testEmailConfig logs success in dev environment",
    "Feedback Routes should allow second user to submit feedback",
    "Feedback Routes should fail without token",
    "Feedback Routes should return 400 for missing message",
    "Flag Routes DELETE /api/flags/:flagId should allow admin to delete a flag",
    "Flag Routes DELETE /api/flags/:flagId should block non-admin user",
    "Flag Routes DELETE /api/flags/:flagId should return 400 for malformed flag ID",
    "Flag Routes DELETE /api/flags/:flagId should return 404 for non-existent flag",
    "Flag Routes GET /api/flags should allow admin to view all flags",
    "Flag Routes GET /api/flags should block non-admin user",
    "Flag Routes POST /api/flags/product/:productId should fail without token",
    "Flag Routes POST /api/flags/product/:productId should flag a product",
    "Flag Routes POST /api/flags/product/:productId should not flag with missing reason",
    "Flag Routes POST /api/flags/product/:productId should return 400 for malformed product ID",
    "Flag Routes POST /api/flags/product/:productId should return 404 for non-existent product",
    "Flag Routes POST /api/flags/review/:reviewId should fail with missing reason",
    "Flag Routes POST /api/flags/review/:reviewId should flag a review",
    "Flag Routes POST /api/flags/review/:reviewId should return 400 for malformed review ID",
    "Flag Routes POST /api/flags/review/:reviewId should return 404 for non-existent review",
    "GET /api/feedback should allow admin to view all feedback",
    "GET /api/feedback should block non-admin",
    "GET /api/feedback should fail without token",
    "GET /api/feedback should filter feedback by type if supported",
    "GET /api/feedback should support pagination if implemented",
    "Guest Order Routes (placeholder) placeholder — replace with real tests",
    "Invoice Routes GET /api/invoices/:orderId should fail without token",
    "Invoice Routes GET /api/invoices/:orderId should return 400 for malformed ObjectId",
    "Invoice Routes GET /api/invoices/:orderId should return 404 or 403 for non-existent or unauthorized order",
    "Invoice Routes GET /api/invoices/:orderId should return 404 or custom status if invoice not yet generated",
    "Invoice Routes GET /api/invoices/:orderId should return invoice for valid order (user)",
    "Invoice Routes GET /api/invoices/download/:orderId should allow PDF invoice download if implemented",
    "Invoice Routes GET /api/invoices/download/:orderId should return 401/403 for missing token",
    "Invoice Routes POST /api/invoices/email should allow admin to send invoice email",
    "Invoice Routes POST /api/invoices/email should block email attempt by non-admin user",
    "Invoice Routes POST /api/invoices/email should fail without token",
    "Order Routes DELETE /api/orders/:id should delete order if admin",
    "Order Routes DELETE /api/orders/:id should fail without token",
    "Order Routes DELETE /api/orders/:id should return 400 for malformed order ID",
    "Order Routes DELETE /api/orders/:id should return 404 or 400 for non-existent order ID",
    "Order Routes GET /api/orders/:id should fail without token",
    "Order Routes GET /api/orders/:id should fetch order by ID",
    "Order Routes GET /api/orders/:id should return 400 for malformed ID",
    "Order Routes GET /api/orders/:id should return 404 or 400 for non-existent ID",
    "Order Routes GET /api/orders/my-orders should fail without token",
    "Order Routes GET /api/orders/my-orders should return current user’s orders",
    "Order Routes POST /api/orders should create a new order (auth required)",
    "Order Routes POST /api/orders should fail with invalid data",
    "Order Routes POST /api/orders should fail without token",
    "Order Routes PUT /api/orders/:id/pay should fail without token",
    "Order Routes PUT /api/orders/:id/pay should mark order as paid",
    "PUT /api/feedback/:id should allow user to update their own feedback if supported",
    "PUT /api/feedback/:id should block other users from editing feedback",
    "PUT /api/feedback/:id should return 400 for malformed ID",
    "PUT /api/feedback/:id should return 404 for non-existent feedback",
    "Product Routes DELETE /api/products/:id should delete product",
    "Product Routes GET /api/products should return product list",
    "Product Routes GET /api/products/:id should fetch single product",
    "Product Routes POST /api/products should create a new product (admin/vendor only)",
    "Product Routes PUT /api/products/:id should update product",
    "Review Moderation Routes DELETE /api/admin/reviews/:reviewId should allow admin to permanently delete a review",
    "Review Moderation Routes DELETE /api/admin/reviews/:reviewId should block non-admin from deleting review",
    "Review Moderation Routes DELETE /api/admin/reviews/:reviewId should return 400 for malformed ID",
    "Review Moderation Routes DELETE /api/admin/reviews/:reviewId should return 404 for non-existent review",
    "Review Moderation Routes GET /api/admin/reviews should allow admin to view flagged reviews",
    "Review Moderation Routes GET /api/admin/reviews should block non-admin access",
    "Review Moderation Routes GET /api/admin/reviews should fail without token",
    "Review Moderation Routes GET /api/admin/reviews should support pagination/filtering if implemented",
    "Review Moderation Routes PUT /api/admin/reviews/:reviewId/hide should allow admin to hide review",
    "Review Moderation Routes PUT /api/admin/reviews/:reviewId/hide should be idempotent if already hidden",
    "Review Moderation Routes PUT /api/admin/reviews/:reviewId/hide should block non-admin from hiding review",
    "Review Moderation Routes PUT /api/admin/reviews/:reviewId/hide should return 400 for malformed ID",
    "Review Moderation Routes PUT /api/admin/reviews/:reviewId/hide should return 404 for non-existent review",
    "Review Moderation Routes PUT /api/admin/reviews/:reviewId/unhide should allow admin to unhide review",
    "Review Moderation Routes PUT /api/admin/reviews/:reviewId/unhide should be idempotent if already unhidden",
    "Review Moderation Routes PUT /api/admin/reviews/:reviewId/unhide should block non-admin from unhiding review",
    "Review Moderation Routes PUT /api/admin/reviews/:reviewId/unhide should return 400 for malformed ID",
    "Review Moderation Routes PUT /api/admin/reviews/:reviewId/unhide should return 404 for non-existent review",
    "Review Routes DELETE /api/reviews/:id should allow admin to delete any review",
    "Review Routes DELETE /api/reviews/:id should delete a review",
    "Review Routes DELETE /api/reviews/:id should not allow another user to delete review",
    "Review Routes DELETE /api/reviews/:id should return 400 for malformed ID",
    "Review Routes DELETE /api/reviews/:id should return 404 for non-existent review",
    "Review Routes GET /api/reviews/product/:productId should return 400 for malformed ID",
    "Review Routes GET /api/reviews/product/:productId should return reviews for product",
    "Review Routes POST /api/products/:productId/reviews should create a review",
    "Review Routes POST /api/products/:productId/reviews should fail without token",
    "Review Routes POST /api/products/:productId/reviews should prevent duplicate reviews by same user",
    "Review Routes POST /api/products/:productId/reviews should return 400 for missing rating or comment",
    "Review Routes PUT /api/reviews/:id should not allow another user to update review",
    "Review Routes PUT /api/reviews/:id should return 400 for malformed ID",
    "Review Routes PUT /api/reviews/:id should update a review",
    "Stripe Routes GET /api/stripe/config should return publishable key from env",
    "Stripe Routes POST /api/stripe/create-checkout-session should reject without token",
    "Stripe Routes POST /api/stripe/create-checkout-session should return 400 for empty items array",
    "Stripe Routes POST /api/stripe/create-checkout-session should return 400 for invalid productId",
    "Stripe Routes POST /api/stripe/create-checkout-session should return 400 for missing items",
    "Stripe Routes POST /api/stripe/create-checkout-session should return 400 for missing success/cancel URLs",
    "Stripe Routes POST /api/stripe/create-checkout-session should return session URL or ID for valid request",
    "Stripe Routes POST /api/stripe/webhook should accept mocked Stripe event (payment_intent.succeeded)",
    "Stripe Routes POST /api/stripe/webhook should reject with invalid signature",
    "Stripe Routes POST /api/stripe/webhook should return 400 for malformed JSON",
    "Stripe Routes POST /api/stripe/webhook should return 400 for missing signature",
    "Stripe Routes POST /api/stripe/webhook should return 400 for unsupported event type",
    "Support Routes DELETE /api/support/:id should allow admin to delete a ticket",
    "Support Routes DELETE /api/support/:id should block another user from deleting ticket",
    "Support Routes DELETE /api/support/:id should block non-admin from deleting ticket",
    "Support Routes DELETE /api/support/:id should return 400 for malformed ID",
    "Support Routes DELETE /api/support/:id should return 404 for non-existent ticket",
    "Support Routes GET /api/support should allow admin to view all tickets",
    "Support Routes GET /api/support should block non-admin from viewing all tickets",
    "Support Routes GET /api/support should support category filtering if implemented",
    "Support Routes GET /api/support/user should allow second user to view their own tickets",
    "Support Routes GET /api/support/user should allow user to view their own tickets",
    "Support Routes GET /api/support/user should block unauthenticated access",
    "Support Routes POST /api/support should allow second user to submit ticket",
    "Support Routes POST /api/support should allow user to submit a support ticket",
    "Support Routes POST /api/support should reject submission without token",
    "Support Routes POST /api/support should return 400 for missing fields",
    "Support Routes PUT /api/support/:id should allow admin to update ticket status and response",
    "Support Routes PUT /api/support/:id should block another user from updating ticket",
    "Support Routes PUT /api/support/:id should block non-admin from updating ticket",
    "Support Routes PUT /api/support/:id should return 400 for malformed ID",
    "Support Routes PUT /api/support/:id should return 404 for non-existent ticket",
    "Upload Routes GET /uploads/:filename (static file check) should return 404 for non-existent file",
    "Upload Routes GET /uploads/:filename (static file check) should serve uploaded file if accessible",
    "Upload Routes POST /api/upload should allow admin to upload a file",
    "Upload Routes POST /api/upload should allow vendor to upload multiple files",
    "Upload Routes POST /api/upload should handle exe file upload",
    "Upload Routes POST /api/upload should handle text file upload",
    "Upload Routes POST /api/upload should handle valid JPEG upload",
    "Upload Routes POST /api/upload should prevent directory traversal in filename",
    "Upload Routes POST /api/upload should reject file over size limit (2MB)",
    "Upload Routes POST /api/upload should return 400 for invalid field name",
    "Upload Routes POST /api/upload should return 400 for missing file",
    "Vendor Routes DELETE /api/vendor/products/:id should delete vendor product if authorized",
    "Vendor Routes DELETE /api/vendor/products/:id should fail without token",
    "Vendor Routes DELETE /api/vendor/products/:id should return 404 or 400 for non-existent product ID",
    "Vendor Routes GET /api/vendor/analytics should fail with non-vendor token",
    "Vendor Routes GET /api/vendor/analytics should fail without token",
    "Vendor Routes GET /api/vendor/analytics should return analytics data for vendor",
    "Vendor Routes GET /api/vendor/revenue should fail with non-vendor token",
    "Vendor Routes GET /api/vendor/revenue should fail without token",
    "Vendor Routes GET /api/vendor/revenue should return revenue data for vendor",
    "Vendor Routes GET /api/vendor/top-customers should fail with non-vendor token",
    "Vendor Routes GET /api/vendor/top-customers should fail without token",
    "Vendor Routes GET /api/vendor/top-customers should return top customers for vendor",
    "Vendor Routes GET /api/vendor/top-products should fail with non-vendor token",
    "Vendor Routes GET /api/vendor/top-products should fail without token",
    "Vendor Routes GET /api/vendor/top-products should return top products for vendor",
    "Vendor Routes POST /api/vendor/products should allow vendor to upload product",
    "Vendor Routes POST /api/vendor/products should fail for non-vendor user",
    "Vendor Routes PUT /api/vendor/profile should allow vendor to update profile",
    "Vendor Routes PUT /api/vendor/profile should block profile update for non-vendor"
  ]
}